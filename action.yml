name: Install Swift
description: Install Swift Release

inputs:
  source:
    description: "Where to source the Swift installer. Specify either 'swift.org' or 'custom' (Github release)"
    required: true
    default: 'swift.org'
    type: choice
    options:
      - swift.org
      - custom

  # for swift.org toolchains:
  branch:
    description: 'Branch for swift.org builds. Only specifiy when using official Swift toolchains from swift.org'
    required: false
  tag:
    description: 'Tag for swift.org builds. Only specifiy when using official Swift toolchains from swift.org'
    required: false
  build_arch:
    description: 'Build architecture (amd64 or arm64). Only specifiy when using official Swift toolchains from swift.org'
    default: 'amd64'
    required: true

  # for custom toolchains:
  github-repo:
    description: 'Github repo in "owner/repo" format. Only specify when using custom toolchains from Github releases.'
    required: false
  release-tag-name:
    description: 'Release tag name. Only specify when using custom toolchains from Github releases.'
    required: false
  release-asset-name:
    description: 'Asset name for the Swift installer executable in the release. Only specify when using custom toolchains from Github releases.'
    required: false
  github-token:
    description: 'Optional Github token for fetching a release. Only specify when using custom toolchains from non-public Github releases.'
    required: false

  # common
  installer-args:
    description: 'Additional arguments to pass to the installer, space-delimited (double quotes are not supported)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Fetch installer from GitHub release
      if: inputs.source == 'custom'
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        gh release download "${{ inputs.release-tag-name }}" --skip-existing --repo "${{ inputs.github-repo }}" --pattern "${{ inputs.release-asset-name }}" --output $([IO.Path]::Combine(${env:Temp}, "installer.exe"))
      shell: pwsh

    - name: Fetch installer from swift.org
      if: runner.os == 'Windows' && inputs.source == 'swift.org'
      run: |
        $URL = if ("${{ inputs.build_arch }}" -eq "amd64") {
          "https://download.swift.org/${{ inputs.branch }}/windows10/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-windows10.exe"
        } else {
          "https://download.swift.org/${{ inputs.branch }}/windows10-${{ inputs.build_arch }}/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-windows10-${{ inputs.build_arch }}.exe"
        }

        $Path = [IO.Path]::Combine(${env:Temp}, "installer.exe")

        Write-Host "Downloading package from $URL to $Path..."
        try {
          (New-Object System.Net.WebClient).DownloadFile($URL, $Path)
        } catch {
          Write-Host "::error::Package download failed: $($_.Exception.Message)"
        }
      shell: pwsh

    - name: Install Swift ${{ inputs.tag }}
      id: install-swift
      if: runner.os == 'Windows'
      run: |
        $Installer = [IO.Path]::Combine(${env:Temp}, "installer.exe")
        $Arguments = "/quiet /lv*x ${env:Temp}/install.log ${{ inputs.installer-args }}".Split(" ", [StringSplitOptions]"RemoveEmptyEntries")

        Write-Host "::debug::Installer Arguments: $($Arguments -join ' ')"
        try {
          $Process = Start-Process -FilePath $Installer -ArgumentList $Arguments -Wait -PassThru -Verb RunAs
          switch ($Process.ExitCode) {
            0 { Write-Host "::debug::Installation successful" }
            3010 { Write-Host "::notice::Installation successful; reboot required"}
            default {
              Write-Host "::error::Installation process returned unexpected exit code: $_"
              exit $_
            }
          }
        } catch {
          Write-Host "::error::Installation failed: $($_.Exception.Message)"
          exit 1
        }

        foreach ($level in "Machine", "User") {
          [Environment]::GetEnvironmentVariables($level).GetEnumerator() | ForEach-Object {
            # For Path variables, append the new values, if they're not already in there
            if ($_.Name -eq "Path") {
              $_.Value = ("${env:Path};$($_.Value)" -Split ';' | Select -Unique) -Join ';'
            }
            $_
          } | Set-Content -Path { "Env:$($_.Name)" }
        }

        # Reset Path and environment
        Write-Output "$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        Get-ChildItem Env: | ForEach-Object { echo "$($_.Name)=$($_.Value)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
      shell: pwsh

    - name: Upload Error Logs
      if: runner.os == 'Windows' && failure() && steps.install-swift.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: installer-logs
        path: ${env:Temp}/install*.log*

    - name: Check Swift version
      if: runner.os == 'Windows'
      id: swift-version
      run: |
        $Output = swift --version
        $Match = ([regex]"\d+.\d+(.\d+)?").Match($Output)
        if ($Match.Success) {
          $SwiftVersion = [System.Version]($Match.Groups[0].Value)
          Write-Output is_newer_than_5_9=$($SwiftVersion -gt [System.Version]"5.9") | Out-File $env:GITHUB_OUTPUT -Append -Encoding UTF8
        }
      shell: pwsh

    - name: VS2022 Compatibility Setup
      if: runner.os == 'Windows' && steps.swift-version.outputs.is_newer_than_5_9 == 'false'
      uses: compnerd/gha-setup-vsdevenv@f1ba60d553a3216ce1b89abe0201213536bc7557 # v6

    - name: VS2022 Compatibility Installation
      if: runner.os == 'Windows' && steps.swift-version.outputs.is_newer_than_5_9 == 'false'
      run: |
        Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
        if (Test-Path -Path "$env:SDKROOT\usr\share\vcruntime.modulemap") {
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.apinotes" -destination "$env:VCToolsInstallDir\include\vcruntime.apinotes"
        } else {
          Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
        }
        Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"
      shell: pwsh

    - name: Install Swift ${{ inputs.tag }}
      if: runner.os == 'Linux'
      run: |
        source /etc/os-release
        echo ${ID} ${VERSION_ID}
        case ${ID} in
        ubuntu)
          case ${VERSION_ID} in
          16.04|18.04|20.04|22.04|24.04)
            if [[ "${{ steps.validation.outputs.use_custom_url }}" == "1" ]]; then
              mv "${{ inputs.release-asset-name }}" swift-toolchain.tar.gz
            else
              curl -sL https://download.swift.org/${{ inputs.branch }}/ubuntu${VERSION_ID/./}/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-ubuntu${VERSION_ID}.tar.gz -o swift-toolchain.tar.gz
            fi
            tar zxf swift-toolchain.tar.gz -C ${HOME}
            rm -f swift-toolchain.tar.gz
          ;;
          *)
            echo "::error file=/etc/os-release,title=Unsupported::unsupported ${ID} release (${VERSION_ID})"
            exit 1
          esac
        ;;
        *)
          echo ::error unknown Linux distribution
          exit 1
        esac

        echo "${HOME}/usr/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Swift ${{ inputs.tag }}
      if: runner.os == 'macOS'
      run: |
        if [[ "${{ steps.validation.outputs.use_custom_url }}" == "1" ]]; then
          mv "${{ inputs.release-asset-name }}" swift-${{ inputs.tag }}-osx.pkg
        else
          curl -sOL https://download.swift.org/${{ inputs.branch }}/xcode/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-osx.pkg
        fi
        xattr -dr com.apple.quarantine swift-${{ inputs.tag }}-osx.pkg
        installer -pkg swift-${{ inputs.tag }}-osx.pkg -target CurrentUserHomeDirectory
        rm -f swift-${{ inputs.tag }}-osx.pkg

        echo "TOOLCHAINS=$(plutil -extract 'CFBundleIdentifier' xml1 ${HOME}/Library/Developer/Toolchains/swift-${{ inputs.tag }}.xctoolchain/Info.plist | xmllint --xpath '//plist/string/text()' -)" >> $GITHUB_ENV
      shell: bash
