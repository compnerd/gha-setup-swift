name: Install Swift
description: Install Swift Release

inputs:
  source:
    description: "Where to source the Swift installer. Specify either 'swift.org' or 'custom' (Github release)"
    required: true
    default: 'swift.org'
    type: choice
    options:
      - swift.org
      - custom

  # for swift.org toolchains:
  branch:
    description: 'Branch for swift.org builds. Only specifiy when using official Swift toolchains from swift.org'
    required: false
  tag:
    description: 'Tag for swift.org builds. Only specifiy when using official Swift toolchains from swift.org'
    required: false
  build_arch:
    description: 'Build architecture (amd64 or arm64). Only specifiy when using official Swift toolchains from swift.org'
    default: 'amd64'
    required: true

  # for custom toolchains:
  github-repo:
    description: 'Github repo in "owner/repo" format. Only specify when using custom toolchains from Github releases.'
    required: false
  release-tag-name:
    description: 'Release tag name. Only specify when using custom toolchains from Github releases.'
    required: false
  release-asset-name:
    description: 'Asset name for the Swift installer executable in the release. Only specify when using custom toolchains from Github releases.'
    required: false
  github-token:
    description: 'Optional Github token for fetching a release. Only specify when using custom toolchains from non-public Github releases.'
    required: false

  # common
  installer-args:
    description: 'Additional arguments to pass to the installer, space-delimited (double quotes are not supported)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Fetch installer from GitHub release
      id: fetch-installer-0
      if: inputs.source == 'custom'
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        gh release download --skip-existing "${{ inputs.release-tag-name }}" --repo "${{ inputs.github-repo }}" --pattern "${{ inputs.release-asset-name }}" --dir ${env:Temp}
        installer-path=[IO.Path]::Combine(${env:Temp}, ${{ inputs.release-asset-name }}) | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      shell: pwsh

    - name: Fetch installer from swift.org
      id: fetch-installer-1
      if: ${{ inputs.source }} == 'swift.org'
      run: |
        $URL = if ("${{ inputs.build_arch }}" -eq "amd64") {
          "https://download.swift.org/${{ inputs.branch }}/windows10/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-windows10.exe"
        } else {
          "https://download.swift.org/${{ inputs.branch }}/windows10-${{ inputs.build_arch }}/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-windows10-${{ inputs.build_arch }}.exe"
        }

        $InvalidCharacters = [IO.Path]::GetInvalidFileNameChars() -Join ''
        $RE = "[{0}]" -f [RegEx]::Escape($InvalidCharacters)
        $FileName = [IO.Path]::GetFileName($URL) -Replace $RE

        if ([String]::IsNullOrEmpty($FileName)) {
          $FileName = [IO.Path]::GetRandomFileName()
        }
        $Path = [IO.Path]::Combine(${env:Temp}, $FileName)

        Write-Host "Downloading package from $URL to $Path..."
        $Retries = 3
        $RetryInterval = 30
        do {
          try {
            $AttemptStartTime = Get-Date
            (New-Object System.Net.WebClient).DownloadFile($URL, $Path)
            $AttemptDuration = [math]::Round(($(Get-Date) - $AttemptStartTime).TotalSeconds, 2)
            Write-Host "Package downloaded in $AttemptDuration seconds"
            break
          } catch {
            $AttemptDuration = [math]::Round(($(Get-Date) - $AttemptStartTime).TotalSeconds, 2)
            Write-Warning "Package download failed after $AttemptDuration seconds"
            Write-Warning $_.Exception.Message
          }

          if ($Retries -eq 1) {
            $Duration = [math]::Round(($(Get-Date) - $StartTime).TotalSeconds, 2)
            throw "Package download failed after $Duration seconds"
          }

          Write-Warning "Waiting $RetryInterval seconds before retrying (retries remaining: $($Retries - 1))..."
          Start-Sleep -Seconds $RetryInterval
        } while (--$Retries -gt 0)

        installer-path=$Path | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

    - name: Install Swift ${{ inputs.tag }}
      if: runner.os == 'Windows'
      run: |
        $Arguments = "${{ inputs.installer-args }}".Split(" ", [StringSplitOptions]"RemoveEmptyEntries")

        $Installer = ${{ steps.fetch-installer-0.outputs.installer-path || steps.fetch-installer-1.outputs.installer-path }}

        $StartTime = Get-Date
        Write-Host "Installer Arguments: $($Arguments -join ' ')"
        Write-Host "Starting Install..."
        try {
          $Process = Start-Process -FilePath $Installer -ArgumentList $Arguments -Wait -PassThru -Verb RunAs
          $ExitCode = $Process.ExitCode
          $Duration = [math]::Round(($(Get-Date) - $StartTime).TotalSeconds, 2)
          switch ($ExitCode) {
            0 { Write-Host "Installation successful in $Duration seconds" }
            3010 { Write-Host "Installation successful in $Duration seconds; reboot required"}
            default {
              Write-Host "Installation process returned unexpected exit code: $ExitCode"
              Write-Host "Time elapsed: $Duration seconds"
              exit $ExitCode
            }
          }
        } catch {
          $Duration = [math]::Round(($(Get-Date) - $StartTime).TotalSeconds, 2)
          Write-Host "Installation failed after $Duration seconds: $_"
          exit 1
        }

        foreach ($level in "Machine", "User") {
          [Environment]::GetEnvironmentVariables($level).GetEnumerator() | % {
            # For Path variables, append the new values, if they're not already in there
            if ($_.Name -Match 'Path$') {
              $_.Value = ($((Get-Content "Env:$($_.Name)") + ";$($_.Value)") -Split ';' | Select -Unique) -Join ';'
            }
            $_
          } | Set-Content -Path { "Env:$($_.Name)" }
        }

        # Reset Path and environment
        echo "$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        Get-ChildItem Env: | % { echo "$($_.Name)=$($_.Value)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
      shell: pwsh

    - name: Check Swift version
      if: runner.os == 'Windows'
      id: swift-version
      run: |
        $SwiftVersionOutput=$(swift --version)
        if ("$SwiftVersionOutput" -match "[\d]+(\.[\d]+){0,2}") {
          $SwiftSemVer=$Matches[0]

          # Ensure we have at least MAJOR.MINOR or [System.Version] won't parse.
          if (-Not ($SwiftSemVer -like "*.*")) {
            $SwiftSemVer += ".0"
          }

          $SwiftVersion=[System.Version]($SwiftSemVer)

          # If the toolchain is newer than 5.9 we don't need to ensure compatibility with VS2022.
          if ($SwiftVersion -gt [System.Version]"5.9") {
            "is_newer_than_5_9='true'" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          } else {
            "is_newer_than_5_9='false'" | Out-File $env:GITHUB_OUTPUT -Append -Encoding utf8
          }
        }
      shell: pwsh

    - name: VS2022 Compatibility Setup
      if: runner.os == 'Windows' && steps.swift-version.outputs.is_newer_than_5_9 == 'false'
      uses: compnerd/gha-setup-vsdevenv@f1ba60d553a3216ce1b89abe0201213536bc7557 # v6

    - name: VS2022 Compatibility Installation
      if: runner.os == 'Windows' && steps.swift-version.outputs.is_newer_than_5_9 == 'false'
      run: |
        Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
        if (Test-Path -Path "$env:SDKROOT\usr\share\vcruntime.modulemap") {
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.apinotes" -destination "$env:VCToolsInstallDir\include\vcruntime.apinotes"
        } else {
          Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
        }
        Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"
      shell: pwsh

    - name: Install Swift ${{ inputs.tag }}
      if: runner.os == 'Linux'
      run: |
        source /etc/os-release
        case ${ID} in
        ubuntu)
          case ${VERSION_ID} in
          16.04|18.04|20.04|22.04)
            if [[ "${{ steps.validation.outputs.use_custom_url }}" == "1" ]]; then
              mv "${{ inputs.release-asset-name }}" swift-toolchain.tar.gz
            else
              curl -sL https://download.swift.org/${{ inputs.branch }}/ubuntu${VERSION_ID/./}/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-ubuntu${VERSION_ID}.tar.gz -o swift-toolchain.tar.gz
            fi
            tar zxf swift-toolchain.tar.gz -C ${HOME}
            rm -f swift-toolchain.tar.gz
          ;;
          *)
            echo "::error file=/etc/os-release,title=Unsupported::unsupported ${OS} release (${VERSION_ID})"
            exit 1
          esac
        ;;
        *)
          echo ::error unknown Linux distribution
          exit 1
        esac

        echo "${HOME}/usr/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Swift ${{ inputs.tag }}
      if: runner.os == 'macOS'
      run: |
        if [[ "${{ steps.validation.outputs.use_custom_url }}" == "1" ]]; then
          mv "${{ inputs.release-asset-name }}" swift-${{ inputs.tag }}-osx.pkg
        else
          curl -sOL https://download.swift.org/${{ inputs.branch }}/xcode/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-osx.pkg
        fi
        xattr -dr com.apple.quarantine swift-${{ inputs.tag }}-osx.pkg
        installer -pkg swift-${{ inputs.tag }}-osx.pkg -target CurrentUserHomeDirectory
        rm -f swift-${{ inputs.tag }}-osx.pkg

        echo "TOOLCHAINS=$(plutil -extract 'CFBundleIdentifier' xml1 ${HOME}/Library/Developer/Toolchains/swift-${{ inputs.tag }}.xctoolchain/Info.plist | xmllint --xpath '//plist/string/text()' -)" >> $GITHUB_ENV
      shell: bash
