name: Install Swift
description: Install Swift Release

inputs:
  branch:
    description: 'Swift Build Branch'
    required: true
  tag:
    description: 'Swift Build Tag'
    required: true

runs:
  using: 'composite'

  steps:
    - name: Install Swift ${{ inputs.tag }}
      if: ${{ runner.os == 'Windows' }}
      run: |
        function Update-EnvironmentVariables {
          foreach ($level in "Machine", "User") {
            [Environment]::GetEnvironmentVariables($level).GetEnumerator() | % {
              # For Path variables, append the new values, if they're not already in there
              if ($_.Name -Match 'Path$') {
                $_.Value = ($((Get-Content "Env:$($_.Name)") + ";$($_.Value)") -Split ';' | Select -Unique) -Join ';'
              }
              $_
            } | Set-Content -Path { "Env:$($_.Name)" }
          }
        }

        Install-Binary -Url "https://download.swift.org/${{ inputs.branch }}/windows10/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-windows10.exe" -Name "installer.exe" -ArgumentList ("-q")
        Update-EnvironmentVariables

        # Reset Path and environment
        echo "$env:Path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        Get-ChildItem Env: | % { echo "$($_.Name)=$($_.Value)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
      shell: pwsh

    - name: VS2022 Compatibility Setup
      if: ${{ runner.os == 'Windows' }}
      uses: seanmiddleditch/gha-setup-vsdevenv@master
    - name: VS2022 Compatibility Installation
      if: ${{ runner.os == 'Windows' }}
      run: |
        Copy-Item "$env:SDKROOT\usr\share\ucrt.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\ucrt\module.modulemap"
        if (Test-Path -Path "$env:SDKROOT\usr\share\vcruntime.modulemap") {
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\vcruntime.apinotes" -destination "$env:VCToolsInstallDir\include\vcruntime.apinotes"
        } else {
          Copy-Item "$env:SDKROOT\usr\share\visualc.modulemap" -destination "$env:VCToolsInstallDir\include\module.modulemap"
          Copy-Item "$env:SDKROOT\usr\share\visualc.apinotes" -destination "$env:VCToolsInstallDir\include\visualc.apinotes"
        }
        Copy-Item "$env:SDKROOT\usr\share\winsdk.modulemap" -destination "$env:UniversalCRTSdkDir\Include\$env:UCRTVersion\um\module.modulemap"
      shell: pwsh

    - name: Install Swift ${{ inputs.tag }}
      if: ${{ runner.os == 'Linux' }}
      run: |
        source /etc/os-release; OS="${ID}${VERSION_ID}"
        case "${OS}" in
        ubuntu16.04|ubuntu18.04|ubuntu20.04|centos7|centos8|amzn2)
          mkdir -p -m 0755 ${HOME}/swift-${{ inputs.tag }}
          cd ${HOME}/swift-${{ inputs.tag }}
          curl -sLo toolchain.tgz https://download.swift.org/${{ inputs.branch }}/${OS/./}/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-${OS}.tar.gz
          # N.B. Can't strip the leading /usr because things rely on that prefix being under the install root.
          tar -z -x --strip-components=1 -f toolchain.tgz && rm -f toolchain.tgz
        *)
          echo "::error file=/etc/os-release,title=Unsupported::unsupported Linux distribution ${RELEASE}"
          exit 1
        esac
        echo "${HOME}/swift-${{ inputs.tag }}/usr/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Swift ${{ inputs.tag }}
      if: ${{ runner.os == 'macOS' }}
      run: |
        curl -sOL https://download.swift.org/${{ inputs.branch }}/xcode/swift-${{ inputs.tag }}/swift-${{ inputs.tag }}-osx.pkg
        xattr -dr com.apple.quarantine swift-${{ inputs.tag }}-osx.pkg
        installer -pkg swift-${{ inputs.tag }}-osx.pkg -target CurrentUserHomeDirectory
        rm -f swift-${{ inputs.tag }}-osx.pkg

        plist="${HOME}/Library/Developer/Toolchains/swift-${{ inputs.tag }}.xctoolchain/Info.plist"
        identifier="$(python3 -c 'from plistlib import load; from sys import argv; print(load(open(argv[1], "rb"))["CFBundleIdentifier"])' ${plist})"
        echo "TOOLCHAINS=$identifier" >> $GITHUB_ENV
      shell: bash
